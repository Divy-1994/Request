<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_wkus_request_man_intake_task</collection>
        <condition/>
        <description>when due date changed</description>
        <execute_function>false</execute_function>
        <filter_condition table="x_wkus_request_man_intake_task">u_due_dateVALCHANGES^EQ<item endquery="false" field="u_due_date" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>ChangeOfDueDateSLA</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	// get the Existing Workflow then stop it. And create new with the new Due Date
	var gr = new GlideRecord("task_sla");
	gr.addQuery('task', current.intake);
	gr.addQuery('stage','in_progress');
	gr.query();
	gs.info('the intake '+current.intake);
	if (gr.next()) {
		gr.stage='cancelled';
		gr.update();
	}
	var newSLA = new GlideRecord("task_sla");
	newSLA.initialize();
	newSLA.start_time = getBeginDate();
	newSLA.planned_end_time = new GlideDateTime(current.u_due_date);
	newSLA.task = current.intake;
	newSLA.sla = '4f943f501b8bf380cd6298efbd4bcbe3';
	newSLA.insert();
	gs.info("START TIME ------------------ "+newSLA.start_time);
	gs.info("DUE DATE TIME -==================== "+newSLA.planned_end_time);
	function getBeginDate(){
		var bdt = new GlideRecord("task_sla");
		bdt.addQuery("name", current.intake);
		bdt.orderByDesc('sys_created_on');
		gr.setLimit(1);
		bdt.query();
		if(gr.next()) {
			gs.info("START TIME -==================== "+gr.start_time);
			return gr.start_time;
		}
		
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>WK_NA_Divya.Vellanki@wolterskluwer.com</sys_created_by>
        <sys_created_on>2019-08-22 12:31:57</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e5875ee71bdb77041d370dc8cd4bcbf2</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>ChangeOfDueDateSLA</sys_name>
        <sys_overrides/>
        <sys_package display_value="Request Management" source="x_wkus_request_man">d5de66171b2ef3001d370dc8cd4bcb41</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Request Management">d5de66171b2ef3001d370dc8cd4bcb41</sys_scope>
        <sys_update_name>sys_script_e5875ee71bdb77041d370dc8cd4bcbf2</sys_update_name>
        <sys_updated_by>WK_NA_Divya.Vellanki@wolterskluwer.com</sys_updated_by>
        <sys_updated_on>2019-08-22 13:40:17</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
